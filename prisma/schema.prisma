generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  name                     String  @unique
  email                    String  @unique
  hash                     String
  NumberOfPiligrimsAllowed Int?
  status                   Boolean @default(true)

  role Role @default(USER)

  groups Group[]
}

model Pilgrim {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  numPassport        String                 @unique
  name               String
  lastName           String
  gender             String
  dateOfBirth        String
  tel                String
  isChef             Boolean                @default(false)
  groupId            String?
  group              Group?                 @relation(fields: [groupId], references: [id])
  chef               Chef[]
  diseases           Pilgrim_Has_Diseases[]
  vaccins            Pilgrim_Has_Vaccins[]
  emergencyContact   EmergencyContact?      @relation(fields: [emergencyContactId], references: [id])
  emergencyContactId String?
}

model EmergencyContact {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String
  lastName  String
  phone     String
  email     String?
  pilgrims  Pilgrim[]
}

model Disease {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  diseaseName String
  pilgrims    Pilgrim_Has_Diseases[]
}

model Vaccin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  vaccinName String
  pilgrims   Pilgrim_Has_Vaccins[]
}

model Pilgrim_Has_Diseases {
  assignedAt DateTime @default(now())
  assignedBy String

  pilgrimId String
  pilgrim   Pilgrim @relation(fields: [pilgrimId], references: [id])

  diseaseId String
  disease   Disease @relation(fields: [diseaseId], references: [id])

  @@id([pilgrimId, diseaseId])
}

model Pilgrim_Has_Vaccins {
  assignedAt DateTime @default(now())
  assignedBy String
  pilgrimId  String
  pilgrim    Pilgrim  @relation(fields: [pilgrimId], references: [id])

  vaccinId String
  vaccin   Vaccin @relation(fields: [vaccinId], references: [id])

  @@id([pilgrimId, vaccinId])
}

model Group {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  name        String
  capacity    Int
  description String?

  userId   String
  user     User      @relation(fields: [userId], references: [id])
  pilgrims Pilgrim[]
  chefId   String
  chef     Chef      @relation(fields: [chefId], references: [id])
  hotelid  String
  hotel    Hotel     @relation(fields: [hotelid], references: [id])
}

model Hotel {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  name        String
  address     String
  phoneNumber String
  stars       Int
  capacity    Int
  groups      Group[]
}

model Chef {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  pilgrimid String
  pirlgrim  Pilgrim  @relation(fields: [pilgrimid], references: [id])
  groups    Group[]
}

model Agent {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      Boolean  @default(true)
  matricule   String   @unique
  firstName   String
  lastName    String
  phone       String
  email       String?
  departement String
  password    String
}

enum Role {
  USER
  ADMIN
}
